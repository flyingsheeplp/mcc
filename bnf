translation_unit: external_decl*

external_decl: 
            | function_definition
            | decl

function_definition: 
            |type_spec declarator compound_stat


decl : 
      |type_spec declarator init_declarator_list ';''

type_spec: 'void' | 'char' | 'int' | struct_spec

struct_spec: 
      |<KW_STRUCT> id
      |<KW_STRUCT> id  '{' struct_decl_list '}'

init_declarator_list    : init_declarator {',' init_declarator}*

init_declarator     : declarator
            | declarator '=' initializer


declarator      : <TK_STAR>* direct_declarator
            |   direct_declarator

direct_declarator   : id
            | '(' declarator ')'
            | direct_declarator '[' const_exp ']'
            | direct_declarator '['     ']'
            | direct_declarator '(' param_type_list ')'
            | direct_declarator '(' id_list ')'
            | direct_declarator '('     ')'

param_type_list     : param_list
            | param_list ',' '...'

param_list      : param_decl
            | param_list ',' param_decl

param_decl      : decl_specs declarator
            | decl_specs abstract_declarator
            | decl_specs

id_list         : id
            | id_list ',' id

initializer :  assignment_exp


stat : 
      | exp_stat
      | compound_stat
      | iteration_stat
      | jump_stat
      | selection_stat

exp_stat: 
      |exp ';'
      |   ';'

compound_stat: 
            |'{' decl_list stat_list '}'
            | '{'       stat_list '}'
            | '{' decl_list     '}'
            | '{'           '}'

stat_list       : stat
            | stat_list stat

selection_stat      : 'if' '(' exp ')' stat
            | 'if' '(' exp ')' stat 'else' stat

iteration_stat:
            | 'for' '(' exp ';' exp ';' exp ')' stat
            | 'for' '(' exp ';' exp ';' ')' stat
            | 'for' '(' exp ';' ';' exp ')' stat
            | 'for' '(' exp ';' ';' ')' stat
            | 'for' '(' ';' exp ';' exp ')' stat
            | 'for' '(' ';' exp ';' ')' stat
            | 'for' '(' ';' ';' exp ')' stat
            | 'for' '(' ';' ';' ')' stat

jump_stat : 
            | 'continue' ';'
            | 'break' ';'
            | 'return' exp ';'
            | 'return'  ';'

exp         : assignment_exp
            | exp ',' assignment_exp

assignment_exp : 
            | unary_exp '=' assignment_exp


equality_exp : relational_exp
            | equality_exp '==' relational_exp
            | equality_exp '!=' relational_exp

relational_exp      : shift_expression
            | relational_exp '<' shift_expression
            | relational_exp '>' shift_expression
            | relational_exp '<=' shift_expression
            | relational_exp '>=' shift_expression

shift_expression    : additive_exp
            | shift_expression '<<' additive_exp
            | shift_expression '>>' additive_exp

additive_exp        : mult_exp
            | additive_exp '+' mult_exp
            | additive_exp '-' mult_exp

mult_exp        : cast_exp
            | mult_exp '*' cast_exp
            | mult_exp '/' cast_exp
            | mult_exp '%' cast_exp

cast_exp        : unary_exp
            | '(' type_name ')' cast_exp

unary_exp       : postfix_exp
            | '++' unary_exp
            | '--' unary_exp
            | unary_operator cast_exp
            | 'sizeof' unary_exp
            | 'sizeof' '(' type_name ')'

unary_operator      : '&' | '*' | '+' | '-' | '~' | '!'

postfix_exp: primary_exp
            | postfix_exp '[' exp ']'
            | postfix_exp '(' argument_exp_list ')'
            | postfix_exp '('           ')'
            | postfix_exp '.' id
            | postfix_exp '->' id


primary_exp: id
            | const
            | string
            | '(' exp ')'

argument_exp_list   : assignment_exp
            | argument_exp_list ',' assignment_exp

const :      
      | int_const
      | char_const

