translation_unit: external_decl*

external_decl: 
            | function_definition
            | decl

function_definition:  type_spec declarator '(' {param_decl}* ')' { compound_stat | ';' }


decl: type_spec init_declarator_list ';''

type_spec: 'void' | 'char' | 'int' | struct_spec

struct_spec: 
      |<KW_STRUCT> id
      |<KW_STRUCT> id  '{' struct_decl_list '}'

init_declarator_list    : init_declarator {',' init_declarator}*

init_declarator     : declarator {'=' initializer}


declarator      : <TK_STAR>* direct_declarator

direct_declarator   : id { '[' const_exp ']' | '[' ']' }*

param_decl: typeSpec declarator


initializer :  assignment_exp

stat : 
      | exp_stat
      | compound_stat
      | iteration_stat
      | jump_stat
      | selection_stat

exp_stat: 
      |exp ';'
      |   ';'

compound_stat: |'{' {decl}* {stat}* '}'

selection_stat      : 'if' '(' exp ')' stat
            | 'if' '(' exp ')' stat 'else' stat

iteration_stat:
            | 'while' '(' exp ')' stat

jump_stat : 
            | 'continue' ';'
            | 'break' ';'
            | 'return' exp ';'
            | 'return'  ';'

exp         : assignment_exp {',' assignment_exp}*

assignment_exp : 
            | equality_exp
            | unary_exp '=' assignment_exp


equality_exp: relational_exp {'==' relational_exp | '!=' relational_exp}*

relational_exp: additive_exp {'<' additive_exp |  '>' additive_exp | '<=' additive_exp | '>=' additive_exp}*


additive_exp        : mult_exp { '+' mult_exp | '-' mult_exp }*

mult_exp :  unary_exp { '*' unary_exp | '/' unary_exp | '%' unary_exp }*


unary_exp: postfix_exp
            |  * unary_exp
            |  + unary_exp
            |  - unary_exp
            | <sizeof> '(' typeSpec ')'

postfix_exp: primary_exp { '[' exp ']' | '(' argument_exp_list ')' | '(' ')'|  '.' id | '->' id  }*

argument_exp_list: assignment_exp {',' assignment_exp}*

primary_exp: id
            | int_const
            | char_const
            | string_const
            | '(' exp ')'

